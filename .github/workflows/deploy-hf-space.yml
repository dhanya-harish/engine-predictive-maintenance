name: Deploy to Hugging Face Space (Docker) + Upload Model

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - "Dockerfile"
      - "requirements.txt"
      - "streamlit_app.py"
      - "README.md"
      - "model/**"
      - ".github/workflows/deploy-hf-space.yml"

concurrency:
  group: hf-space-deploy
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
      SPACE_ID: dhani10/predictive-maintenance-app
      MODEL_REPO: dhani10/predictive-maintenance-model
      MODEL_FILE: model/engine_model.joblib

    steps:
      - name: Checkout repo
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps (huggingface_hub)
        run: |
          python -m pip install --upgrade pip
          pip install "huggingface_hub>=0.26.0"

      - name: Deploy to HF (upload model if present + push Space)
        shell: bash
        run: |
          python - <<'PY'
          import os, shutil
          from pathlib import Path
          from huggingface_hub import login, HfApi, create_repo, upload_file, upload_folder
          from huggingface_hub.utils import RepositoryNotFoundError

          HF_TOKEN   = os.environ.get("HF_TOKEN")
          SPACE_ID   = os.environ.get("SPACE_ID")
          MODEL_REPO = os.environ.get("MODEL_REPO")
          MODEL_FILE = os.environ.get("MODEL_FILE")

          if not HF_TOKEN:
              raise SystemExit("HF_TOKEN GitHub Secret is required.")

          # --- Auth ---
          login(HF_TOKEN)
          api = HfApi(token=HF_TOKEN)

          # --- 1) Upload model if file exists in repo ---
          mf = Path(MODEL_FILE)
          if mf.exists():
              print(f"[model] Uploading {mf} to {MODEL_REPO} ...")
              create_repo(repo_id=MODEL_REPO, repo_type="model", private=True, exist_ok=True, token=HF_TOKEN)
              # keep the same path in the repo
              upload_file(
                  path_or_fileobj=str(mf),
                  path_in_repo=str(mf).replace("\\", "/"),
                  repo_id=MODEL_REPO,
                  repo_type="model",
                  token=HF_TOKEN,
                  commit_message=f"Upload {mf.name} via GitHub Actions"
              )
              print(f"[model] Done: https://huggingface.co/{MODEL_REPO}")
          else:
              print(f"[model] Skipped: {mf} not found in the repo.")

          # --- 2) Prepare Space payload (Docker runtime) ---
          deploy_dir = Path("deploy_pkg")
          if deploy_dir.exists(): shutil.rmtree(deploy_dir)
          deploy_dir.mkdir(parents=True, exist_ok=True)

          # copy files if present; they should be in repo root
          needed = ["Dockerfile", "requirements.txt", "streamlit_app.py"]
          for f in needed:
              p = Path(f)
              if not p.exists():
                  raise SystemExit(f"Missing required file: {f}")
              shutil.copy2(p, deploy_dir / p.name)

          # always write a correct README for Docker runtime
          (deploy_dir / "README.md").write_text(
              """---
title: Predictive Maintenance App (Docker)
emoji: "ðŸ”§"
colorFrom: indigo
colorTo: blue
sdk: docker
pinned: false
---
This Space runs a Streamlit app inside a custom Docker image.
If the model repo is private, add a Space Secret **HF_TOKEN** (READ token) and restart the Space.
""",
              encoding="utf-8"
          )

          # --- 3) Create Space if needed ---
          try:
              api.repo_info(repo_id=SPACE_ID, repo_type="space")
              print(f"[space] Exists: https://huggingface.co/spaces/{SPACE_ID}")
          except RepositoryNotFoundError:
              create_repo(repo_id=SPACE_ID, repo_type="space", private=False, exist_ok=True, token=HF_TOKEN)
              print(f"[space] Created: https://huggingface.co/spaces/{SPACE_ID}")

          # --- 4) Upload all Space files (Dockerfile, requirements.txt, streamlit_app.py, README.md) ---
          upload_folder(
              folder_path=str(deploy_dir),
              repo_id=SPACE_ID,
              repo_type="space",
              token=HF_TOKEN,
              commit_message="Deploy Docker-based Streamlit app from GitHub Actions",
          )
          print(f"[space] Files uploaded.")

          # --- 5) Request rebuild ---
          try:
              api.restart_space(repo_id=SPACE_ID, token=HF_TOKEN)
              print("[space] Restart requested.")
          except Exception:
              print("[space] restart_space not available; build will start automatically.")

          print(f"\nâœ… Model: https://huggingface.co/{MODEL_REPO}")
          print(f"âœ… Space: https://huggingface.co/spaces/{SPACE_ID}")
